<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8">
	<title>backchan.nl &mdash; thin</title>

	<script src="/static/js/lib/jquery-1.6.2.min.js" type="text/javascript"></script>
	<script src="/static/js/lib/underscore-min.js" type="text/javascript"></script>
	<script src="/static/js/lib/backbone-min.js" type="text/javascript"></script>
	
	<script src="/socket.io/socket.io.js"></script>
	
	<script type="text/javascript" charset="utf-8">
	
		/* STARTUP & SETUP */
		var socket = io.connect("http://<% server %>:<%= port %>");
		var hotPostsList;
		var newPostsList;
		var allPostsList;
		
		var identity = {};
	
		$(document).ready(function() {
			console.log("Document is ready!");

			if("name" in localStorage && "affiliation" in localStorage) {
				console.log("auto-logging in");
				socket.emit("identify", {
					"name":localStorage["name"],
					"affiliation":localStorage["affiliation"]});
				$("#identify").hide();
			} else {
				$("#dashboard").hide();
				$("#toggle-post").hide();
				
			}
			
			$("#dialog").hide();
			$("#dialog").click(hideDialog);

			
			
			$("#set_identity").click(function(event) {
				// Send a message to the server.
				
				var name = $("#name").val();
				var affiliation = $("#affiliation").val();
				
				socket.emit("identify", {
					"name":name,
					"affiliation":affiliation});
					
					localStorage["name"] = name;
					localStorage["affiliation"] = affiliation;
					
				event.preventDefault();
			});
			
			$("#toggle-post").click(togglePostContainer);
			$("#show-posts").click(toggleAllPosts);
			
			$("#submit-post").click(function() {
				socket.emit("post", {"text":$("#post-text").val()});
				$("#post-text").val("");
				togglePostContainer();
			});
			
			// Do some testing of the backbone situation to see if the pieces
			// are all working correctly.
			newPostsList = new Backchannl.NewPostList();
			newPostsListView = new Backchannl.NewPostListView({collection: newPostsList});
			
			hotPostsList = new Backchannl.PostList();
			hotPostsListView = new Backchannl.HotPostListView({collection: hotPostsList});
			
			allPostsList = new Backchannl.PostList();
			allPostsListView = new Backchannl.PostListView({collection:allPostsList});

			$("#dashboard").prepend(newPostsListView.render().el);
			$("#dashboard").prepend(hotPostsListView.render().el);
			$("#dashboard").append(allPostsListView.render().el);
		});
		
		socket.on("posts.list", function(data) {
			// Replace our "allPosts" list with this list.
			
			allPostsList.reset([]);
			for(var index in data["posts"]) {
				var postDict = data["posts"][index];
				var post = new Backchannl.Post(postDict);
				allPostsList.add(post);
			}
		});
		
		socket.on('connect', function(data) {
			console.log("Connected to server.");
		});
		
		socket.on('identify', function(data) {
			$("#identity").text(data["name"] + " / " + data["affiliation"]);
			$("#presence").text("1 person connected");
			
			
			identity = data;
			
			// When the server ACKS our identify operation, hide that pane
			// and show the main one.
			$("#identify").hide();
			$("#dashboard").show();
			$("#toggle-post").show();
			
		});
		
		socket.on('post.new', function(data) {
			
			// Construct a new post model object out of the data.
			var newPostModel = new Backchannl.Post(data);
			
			console.log(newPostModel);
			
			
			if(newPostModel.get("from_name")!=identity["name"] && newPostModel.get("from_affiliation")!=identity["affiliation"]) {
				newPostsList.add(newPostModel);
			} else {
				presentDialog("Thanks for your post!");
			}
			
			allPostsList.add(newPostModel);
		});
		
		socket.on("post.vote", function(data) {
			var post = allPostsList.get(data["id"]);
			post.add_vote(data["timestamp"]);
		});
		
		socket.on("post.vote_failed", function() {
			presentDialog("You've already voted on that post.");
		});
		
		socket.on("post.hot", function(data) {

			// 
			// if(hotPostsList.length > 0) {
			// 	hotPostsList.remove(hotPostsList.at(0));
			// }
			
			
			// Just add it directly. The list view will manage the removal
			// of the previous item at an appropriate time (eg after 
			// animating it off the screen.)
			if(data["id"]!=null) {
				var post = allPostsList.get(data["id"]);
				console.log("new hot post: " + data["id"]);
				if(hotPostsList.indexOf(post)==-1) {
					hotPostsList.add(post);
				} else {
					console.log("skipping hot post because we already have it in the list");
				}
			} else {
				console.log("empty hot posts list, emptying collection");
				hotPostsList.remove(hotPostsList.at(0));
			}
		});
		
		socket.on("presence", function(data) {
			var text = "";
			if(data["num"]==1) {
				text = "1 person connected";
			} else {
				text = data["num"] + " people connected";
			}
			
			$("#presence").text(text);
		});
		
		socket.on("reset", function() {
			// Give the server a way to force a refresh. This is a lame way to
			// fix the user/null issue, but probably easier than doing it
			// properly.
			
			presentDialog("Reconnecting to the server...")
			
			setTimeout(function() {
				window.location.reload(false);
			}, 2900);
		});
		
		function togglePostContainer() {
			// Decide what our current state is.
			var postContainerEl = $("#add-post-container");

			if(parseInt(postContainerEl.css("top")) < 0) {
				// Animate to expose it.
				postContainerEl.animate({top:0});
			} else {
				// Animate to hide it.
				postContainerEl.animate({top:-133});
			}
		}
		
		function toggleAllPosts() {
			
			
			var allPostsEl = $("#all");
			console.log("top: " + allPostsEl.css("top"));
			if(parseInt(allPostsEl.css("top")) > 0) {
				// Animate to expose it.
				allPostsEl.animate({top:-290});
				window.resizeBy(0, -423);
				window.moveBy(0, 423);
				
			} else {
				// Animate to hide it.
				allPostsEl.animate({top:152});
				window.moveBy(0, -423);
				window.resizeBy(0, 423);
				// window.resizeTo($(document).width(), $(document).height()+423);
				
			}
		}
		
		function presentDialog(dialogText) {
			$("#dialog").text(dialogText);
			$("#dialog").show(150);
			
			setTimeout(hideDialog, 3000);
		}
		
		function hideDialog() {
			$("#dialog").hide(150);
		}
		
	</script>
	
	<link rel="stylesheet" href="/static/css/base.css" type="text/css" media="screen"  charset="utf-8">
	
</head>
<body id="index" onload="">
<div id="container">

<div id="identify">
	<h1>Welcome to backchan.nl!</h1>
	<form method="get" accept-charset="utf-8">
	<table border="0">
		<tr><td>Name</td><td><input type="text" name="name" value="" id="name"></tr>
		<tr><td>Affiliation</td><td><input type="text" name="affiliation" value="" id="affiliation"></td></tr>
		<tr><td></td><td><div class="button" id="set_identity">login</div></td></tr>
	</table>
	</form>
</div>


<div id="dashboard">

<!-- The hot and new views get pushed in here automatically on startup. -->

<br class="clear">
<div id="footer">
<div id="identity">
</div>

<div id="show-posts">
show all posts
</div>

<div id="presence">
</div>
</div>
<br class="clear">
</div>


</div>

<div id="add-post-container">
<div id="post">
	<h1>Submit a post</h1>
	<textarea id="post-text"></textarea>
	<div class="button" id="submit-post">post</div>
</div>
<div id="toggle-post">
post a thought
</div>
</div>


<div id="dialog">
	this is my dialog message. HOORAY!
</div>

<script src="/static/js/backchannl-backbone.js" type="text/javascript"></script>
</body>
</html>